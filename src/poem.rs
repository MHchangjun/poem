// Generated by diesel_ext

use diesel::prelude::*;
use uuid::Uuid;

use super::db_error::DbError;

use super::schema::poems;

#[derive(Queryable, Debug, Insertable)]
pub struct Poem {
    pub id: String,
    pub subject_id: String,
    pub body: String,
    pub like: i32,
}

impl Poem {
    pub fn insert(new_poem: &NewPoem, conn: &SqliteConnection) -> Result<Poem, DbError> {
        use crate::schema::poems::dsl::*;

        let new_poem = new_poem.to_entity();

        diesel::insert_into(poems)
            .values(&new_poem)
            .execute(conn)?;

        Ok(new_poem)
    }
}

pub struct NewPoem {
    pub subject_id: String,
    pub body: String,
}

impl NewPoem {
    pub fn to_entity(&self) -> Poem {
        Poem {
            id: Uuid::new_v4().to_string(),
            subject_id: self.subject_id.to_owned(),
            body: self.body.to_owned(),
            like: 0
        }
    }
}