// Generated by diesel_ext

use diesel::prelude::*;

use crate::api::poem::NewPoem;

use super::db_error::DbError;

use super::schema::poems;

#[derive(Queryable, Debug, Insertable, PartialEq)]
pub struct Poem {
    pub id: String,
    pub subject_id: String,
    pub body: String,
    pub like: i32,
}

impl Poem {
    pub fn insert(new_poem: &NewPoem, conn: &SqliteConnection) -> Result<String, DbError> {
        use crate::db::schema::poems::dsl::*;

        let new_poem = new_poem.to_entity();

        diesel::insert_into(poems)
            .values(&new_poem)
            .execute(conn)?;

        Ok(new_poem.id)
    }

    pub fn get(_subject_id: &String, conn: &SqliteConnection) -> Result<Vec<Poem>, DbError> {
        use crate::db::schema::poems::dsl::*;

        let poem = match poems
            .filter(subject_id.eq(_subject_id))
            .load::<Poem>(conn) {
                Ok(_poem) => _poem,
                Err(_) => vec![]
            };

        Ok(poem)
    }
}